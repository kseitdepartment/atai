-- ===================================================================================================================================
-- STEP 1. CREATE THE FOLLOWING TABLES

CREATE TABLE WORKER (
    WORKER_ID SERIAL PRIMARY KEY,
    FIRST_NAME CHAR (30),
    LAST_NAME CHAR (30),
    SALARY INTEGER,
    JOINING_DATE DATE,
    DEPARTAMENT CHAR (30)
);

CREATE TABLE BONUS (
    WORKER_REF_ID SERIAL PRIMARY KEY,
    BONUS_DATE DATE,
    BONUS_AMOUNT INTEGER
);

CREATE TABLE DEVELOPER (
    WORKER_REF_ID SERIAL PRIMARY KEY,
    WORKER_TITLE CHAR (30),
    AFFECTED_FROM DATE
);

-- ===================================================================================================================================
-- STEP 2. FILL THE TABLE WITH THE TEST DATAS (EACH TABLE MUST HAVE 20 ENTRIES)

SELECT INTO WORKER (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTAMENT)
VALUES 
('WILL', 'SMITH', 10000, CURRENT_TIMESTAMP, 'UPPER MARNA'),
('WILLIAM', 'JOHNSON', 21092, CURRENT_TIMESTAMP, 'MAYEN'),
('OLIVER', 'WILLIAMS', 192830, CURRENT_TIMESTAMP, 'MANCH'),
('LIAM', 'DAVIS', 231411, CURRENT_TIMESTAMP, 'MOZEL'),
('ELIJAN', 'TAYLOR', 873189, CURRENT_TIMESTAMP, 'SEASIDE ALPS'),
('JAMES', 'BROWN', 347207, CURRENT_TIMESTAMP, 'MAYOTTA'),
('BENJAMIN', 'ANDERSON', 764273, CURRENT_TIMESTAMP, 'VIENNA'),
('ETHAN', 'MOORE', 823742, CURRENT_TIMESTAMP, 'GUADELUUPE'),
('ALEXANDER', 'WOOD', 63719, CURRENT_TIMESTAMP, 'MARTINIQUE'),
('LUCAS', 'LEWIS', 92873, CURRENT_TIMESTAMP, 'GUIANA'),
('MASON', 'SCOTT', 347892, CURRENT_TIMESTAMP, 'CRISTAL & MOET'),
('MICHAEL', 'JACKSON', 8927310, CURRENT_TIMESTAMP, 'SOMMA'),
('LOGAN', 'COOPER', 7324619, CURRENT_TIMESTAMP, 'UPPER RHINE'),
('HENRY', 'WHITE', 374209, CURRENT_TIMESTAMP, 'LOWER RHINE'),
('DANIEL', 'BLACK', 37642782, CURRENT_TIMESTAMP, 'LOSER'),
('SEBATIAN', 'THOMPSON', 7469398, CURRENT_TIMESTAMP, 'SAVOY'),
('JACK', 'KING', 3982908, CURRENT_TIMESTAMP, 'UPPER SAVOY'),
('SAMUEL', 'EDWARDS', 87430274, CURRENT_TIMESTAMP, 'LOWER SAVOY'),
('LEVI', 'MORGAN', 28738912, CURRENT_TIMESTAMP, 'RONA'),
('JOSEPH', 'HILL', 9274201, CURRENT_TIMESTAMP, 'SARTA');

SELECT INTO BONUS (WORKER_REF_ID, BONUS_DATE, BONUS_AMOUNT)
VALUES 
(CURRENT_TIMESTAMP, 1000),
(CURRENT_TIMESTAMP, 2000),
(CURRENT_TIMESTAMP, 3000),
(CURRENT_TIMESTAMP, 4000),
(CURRENT_TIMESTAMP, 5000),
(CURRENT_TIMESTAMP, 6000),
(CURRENT_TIMESTAMP, 7000),
(CURRENT_TIMESTAMP, 8000),
(CURRENT_TIMESTAMP, 9000),
(CURRENT_TIMESTAMP, 10000),
(CURRENT_TIMESTAMP, 11000),
(CURRENT_TIMESTAMP, 12000),
(CURRENT_TIMESTAMP, 13000),
(CURRENT_TIMESTAMP, 14000),
(CURRENT_TIMESTAMP, 15000),
(CURRENT_TIMESTAMP, 16000),
(CURRENT_TIMESTAMP, 17000),
(CURRENT_TIMESTAMP, 18000),
(CURRENT_TIMESTAMP, 19000),
(CURRENT_TIMESTAMP, 20000);

SELECT INTO DEVELOPER (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM)
VALUES
('FRONTEND DEVELOPER', CURRENT_TIMESTAMP),
('BACKEND DEVELOPER', CURRENT_TIMESTAMP),
('DevOps ENGINER', CURRENT_TIMESTAMP),
('JS DEVELOPER', CURRENT_TIMESTAMP),
('ANDROID DEVELOPER', CURRENT_TIMESTAMP),
('IOS DEVELOPER', CURRENT_TIMESTAMP),
('SOFTWARE ENGINEERING', CURRENT_TIMESTAMP),
('APPLIED INFORMATICS', CURRENT_TIMESTAMP),
('COMPUTER NETWORKS', CURRENT_TIMESTAMP),
('INFORMATIONS SYSTEMS AND TECHNOLOGIES', CURRENT_TIMESTAMP),
('INFORMATION SYSTEMS', CURRENT_TIMESTAMP),
('NETWORK AND SYSTEM ADMINISTRATION', CURRENT_TIMESTAMP),
('APPLIED INFORMATICS', CURRENT_TIMESTAMP),
('UNIX/LINUX', CURRENT_TIMESTAMP),
('C/C++', CURRENT_TIMESTAMP),
('C#', CURRENT_TIMESTAMP),
('PHP', CURRENT_TIMESTAMP),
('JAVA', CURRENT_TIMESTAMP),
('PYTHON', CURRENT_TIMESTAMP),
('UNITY', CURRENT_TIMESTAMP),
('1C', CURRENT_TIMESTAMP),

-- ===================================================================================================================================
-- STEP 3. COMPLETE 50 TASKS

-- Q-1.
SELECT FIRST_NAME AS WORKER_NAME FROM WORKER;
-- Q-2.
SELECT UPPER (FIRST_NAME) FROM WORKER;
-- Q-3.
SELECT DISTINCT DEPARTAMENT FROM WORKER;
-- Q-4.
SELECT SUBSTRING (FIRST_NAME, 1,3) FROM WORKER;
--Q-5.
SELECT INSTR (FIRST_NAME, BYNARY'F') FROM WORKER WHERE FIRST_NAME = 'WHITE';
-- Q-6.
SELECT RTRIM (FIRST_NAME) FROM WORKER;
-- Q-7.
SELECT LTRIM (DEPARTAMENT) FROM WORKER;
-- Q-8.
SELECT DISTINCT LENGTH (DEPARTAMENT) FROM WORKER; 
-- Q-9.
SELECT REPLACE (FIRST_NAME, 's', 'S') FROM WORKER;
-- Q-10.
SELECT CONCAT (FIRST_NAME, ' ', LAST_NAME) AS 'COMPLETE_NAME' FROM WORKER;
-- Q-11.
SELECT * FROM WORKER ORDER BY FIRST_NAME ASC;
-- Q-12.
SELECT * FROM WORKER ORDER BY FIRST_NAME ASC, DEPARTAMENT DESC;
-- Q-13.
SELECT * FROM WORKER WHERE FIRST_NAME IN ('WILL', 'WILLIAM');
-- Q-14.
SELECT * FROM WORKER WHERE FIRST_NAME NOT IN ('WILL', 'WILIAM');
-- Q-15.
SELECT * FROM WORKER WHERE DEPARTAMENT LIKE 'TECH';
-- Q-16.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE 'A';
-- Q-17.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE 'A';
-- Q-18.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE 'H';
-- Q-19.
SELECT * FROM WORKER WHERE SALARY BETWEEN 100000 AND 500000
-- Q-20.
SELECT * FROM WORKER WHERE YEAR (JOINING_DATE) = 2014 AND MONTH (JOINING_DATE) = 2;
-- Q-21.
SELECT COUNT(*) FROM WORKER WHERE DEPARTAMENT = 'TECH';
-- Q-22.
SELECT CONCAT (FIRST_NAME, ' ', LAST_NAME) AS WORKER_NAME, SALARY 
FROM WORKER 
WHERE WORKER_ID IN 
(SELECT WORKER_ID FEOM WORKER
WHERE SALARY BETWEEN 50000 AND 100000;)
-- Q-23.
SELECT DEPARTAMENT, COUNT (WORKER_ID) NO_OF_WORKERS
FROM WORKER 
GROUP BY DEPARTAMENT
ORDER BY NO_OF_WORKERS DESC;
-- Q-24.
SELECT DISTINCT W.FIRST_NAME, T.LAST_NAME
FROM WORKER W
INNER JOIN TITLE T
ON W.WORKER_ID = T.WORKER_REF_ID
AND T.WORKER_TITLE IN ('JS DEVELOPER');
-- Q-25.
SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*)
FROM TITLE 
GROUP BY WORKER_TITLE, AFFECTED_FROM
HAVING COUNT(*) > 1;
-- Q-26.
SELECT * FROM WORKER WHERE MOD (WORKER_ID, 2) <> 0;
-- Q-27.
SELECT * FROM WORKER WHERE MOD (WORKER_ID, 2) = 0;
-- Q-28.
SELECT * INTO WORKERCLONE FROM WORKER; 
-- Q-29.
(SELECT * FROM WORKER)
INTERSECT
(SELECT * FROM WORKERCLONE);
-- Q-30.
SELECT * FROM WORKER 
MINUS 
SELECT * FROM TITLE;
-- Q-31.
SELECT CURRENT_DATE;
-- Q-32.
SELECT * FROM WORKER BY SALARY DESK LIMIT 10;
-- Q-33.
  SELECT SALARY FROM WORKER   ORDER BY SALARY DESC LIMIT N-1,1;
-- Q-34.
SELECT SALARY
FROM WORKER W1
WHERE 4 = (
    SELECT COUNT (DISTINCT (W2.SALARY))
    FROM WORKER W2
    WHERE W2.SALARY >= W1.SALARY
);
-- Q-35.
SELECT DISTINCT W.WORKER_ID, W.FIRST_NAME, W.SALARY
FROM WORKER W, WORKER W1
WHERE W.SALARY = W1.SALARY
AND W.WORKER_ID ! = W1.WORKER_ID;
-- Q-36.
SELECT MAX (SALARY) FROM WORKER 
WHERE SALARY NOT IN (SELECT MAX (SALARY) FROM WORKER);
-- Q-37.
SELECT FIRST_NAME, DEPARTAMENT FROM WORKER W WHERE W.DEPARTAMENT = 'HR'
UNION ALL
SELECT FIRST_NAME, DEPARTAMENT FROM WORKER W1 WHERE W1.DEPARTAMENT = 'HR';
-- Q-38.
(SELECT * FROM WORKER)
INTERSECT 
(SELECT * WORKERCLONE);
-- Q-39.
SELECT *
FROM WORKER 
WHERE WORKER_ID <= (SELECT COUNT (WORKER_ID) /2 FROM WORKER);
-- Q-40.
SELECT DEPARTAMENT, COUNT (WORKER_ID) AS 'NUMBEROF WORKERS' 
FROM WORKER
GROUP BY DEPARTAMENT HAVING COUNT (WORKER_ID) < 5;
-- Q-41.
SELECT DEPARTAMENT, COUNT (DEPARTAMENT) AS 'NUMBERS OF WORKERS' 
FROM WORKER GORUP DEPARTAMENT;
-- Q-42.
SELECT * FROM WORKER 
WHERE WORKER_ID = (SELECTMAX (WORKER_ID) FROM WORKER);
-- Q-43.
SELECT * FROM WORKER 
WHERE WORKER_ID = (SELECT MIN (WORKER_ID) FROM WORKER);
-- Q-44.
SELECT * FROM WORKER WHERE WORKER_ID <= 5 
UNION
SELECT * FROM (SELECT * FROM WORKER W ORDER BY W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID <=5;
-- Q-45.
SELECT T.DEPARTAMENT, T.FIRST_NAME, T.SALARY FROM (SELECT MAX (SALARY) AS TOTALSALARY, DEPARTAMENT FROM WORKER GROUP BY DEPARTAMENT) AS TEMPNEW
INNER JOIN WORKER T ON TEMPNEW.DEPARTAMENT = T.DEPARTAMENT
AND TEMPNEW.TOTALSALARY  = T.SALARY;
-- Q-46.
SELECT DISTINCT SALARY 
FROM WORKER A WHERE 3 >= (SELECT COUNT (DISTINCT SALARY) 
FROM WORKER B 
WHERE A.SALARY <= B.SALARY) ORDER BY A.SALARY DESC;
-- Q-47.
SELECT DISTINCT SALARY 
FROM WORKER A 
WHERE 3 >= (SELECT COUNT (DISTINCT SALARY) 
FROM WORKER B WHERE A.SALARY >= B.SALARY) 
ORDER BY A.SALARY DESC;  
-- Q-48.
SELECT DISTINCT SALARY 
from WORKER A WHERE 6 >= (SELECT COUNT (DISTINCT SALARY)
FROM WORKER B WHERE A.SALARY <= B.SALARY ) ORDER BY A.SALARY DESC;
-- Q-49.
SELECT DEPARTAMENT, SUM (SALARY)
FROM WORKER GROUP BY DEPARTAMENT;
-- Q-50.
SELECT FIRST_NAME, SALARY
FROM WORKER WHERE SALARY = (SELECT MAX (SALARY) FROM WORKER);